import csv
import sys
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

    # typically ./libna.ref.alerts.csv
    alerts_csv = Path(sys.argv[1])

    # typically ~/llvm-project/llvm/lib/Transforms/Scalar/InsertCompSimpTestFunctions.cpp 
    llvm_test_inserter_file = Path(sys.argv[2])

    ### Determine which flagged insns are not, at least, having a function generated in
    ### ./test.o generated by llvm-test-compsimp-transforms.py
    ss_mir_opcodes = set()
    cs_mir_opcodes = set()

    with alerts_csv.open(mode="r") as csv_file:
        csv_reader = csv.DictReader(csv_file)

        for row in csv_reader:
            mir_opc = row['mir_opcode']
            optimization = row['alert_reason']
            
            logging.debug(f"[{optimization}] mir_opcode is: {mir_opc}")

            which_opcode_set = ss_mir_opcodes if optimization == "silent-stores" else cs_mir_opcodes
            which_opcode_set.add(mir_opc)


    cs_untested = set()
    with llvm_test_inserter_file.open(mode="r") as test_impl_file:
        test_impl_code = test_impl_file.read()

        # silent stores. no test infra yet
        for mir_opc in ss_mir_opcodes:
            if mir_opc not in test_impl_code:
                logging.critical(f"[SilentStores] MIR opcode {mir_opc} not currently tested")
        # comp simp
        for mir_opc in cs_mir_opcodes:
            if mir_opc not in test_impl_code:
                cs_untested.add(mir_opc)
                logging.critical(f"[CompSimp] MIR opcode {mir_opc} not currently tested")

    logging.critical(f"[CompSimp] {len(cs_untested)} untested MIR opcodes")

    ### Determine which instructions are being tested that are not flagged
    ### (in the libNa reference impl build alerts csv file)
    fuzz_harnesses_dir = Path(sys.argv[2])

    fuzz_harness_c_files = fuzz_harnesses_dir.glob('*.c')

    # these c file names look like this:
    # ADC32mi8-implementation-tester.c
    # we want this ADC32mi8 part
    def c_file_to_mir_opc(c_file_name):
        mir_opc, _, _ = str(c_file_name).split('-')
        return mir_opc
    
    tested_mir_opcs = set(map(c_file_to_mir_opc, fuzz_harness_c_files))

    # what has a test but is not flagged on (because switch from vector
    # impls to ref impls)
    unnecessarily_tested = tested_mir_opcs - cs_mir_opcodes
    for mir_opc in unnecessarily_tested:
        
        # no testing infra for SS yet
        logging.critical(f"[CompSimp] MIR opcode {mir_opc} unnecessarily tested")
