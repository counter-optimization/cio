#!/bin/bash

# SET BY USER
CC=`realpath ~/llvm-project/build/bin/clang`
CHECKER_PLUGIN_PATH=`realpath ~/checker/bap/interval/`

# cio defaults
TOOLNAME=cio
BUILD_DIR=`realpath ./${TOOLNAME}-build`
NORMAL_MAKE_LOG=`realpath ${BUILD_DIR}/normal.make.log`
BIG_OBJ=`realpath ${BUILD_DIR}/jammed.together.o`
ALL_SECRETS_CSV=`realpath ${BUILD_DIR}/secrets.csv`
BAP_LOGS=`realpath ${BUILD_DIR}/bap.log`
CHECKER_ALERTS_CSV=`realpath ${BUILD_DIR}/checker.alerts.csv`
NUM_MAKE_JOB_SLOTS=8

EXTRA_CFLAGS=""
EXTRA_CHECKER_FLAGS=""

IS_LIBSODIUM=0

MITIGATE_SS=0
MITIGATE_CS=0

function usage
{
    echo "Usage: $TOOLNAME [ -h | --help (displays this message) ]
			   [ -c | --cc <path to c compiler> ]
    	 	 	   [ -p | --checker-plugin-path <path to dir with uarch_checker.plugin> ]
			   [ -o | --big-obj <path where $TOOLNAME puts jammed together obj file> ]
			   [ -b | --build-dir <path where $TOOLNAME stores intermeiate build artifacts> ]
			   [ -p | --cflags \"<~double quoted string~ of extra cflags for CC>\" ]
			   [ -e | --checker-flags \"<~double quoted string~ of extra flags for uarch_checker>\" ]
			   [ -j <num make job slots> ]
			   [ --is-libsodium <run libsodium init> ]
			   [ --ss (do silent store checks and mitigations) ]
			   [ --cs (do comp simp checks and mitigaitons) ]
			   -f | --config-file <path to uarch checker config file for checking>
			   -t | --crypto-dir <path to the crypto lib project that has the root makefile>
			  
	       	 --config-file and crypto_project_dir_root are required arguments. If they are not passed,
                 the defaults of ${CC} and $(pwd) are used respectively."
    exit 2
}

PARSED_ARGS=$(getopt -o "hc:p:b:o:f:e:p:t:j:" -l "help,cc:,checker-plugin-path:,build-dir:,big-obj:,config-file:,checker-flags:,cflags:,crypto-dir:,is-libsodium,ss,cs" -n $TOOLNAME -- "$@")

if [[ $? -ne 0 ]]; then
       echo "Error parsing args"
       usage
fi

# echo $PARSED_ARGS

eval set -- "$PARSED_ARGS"
unset PARSED_ARGS

while true; do
    case "$1" in
	'-h' | '--help')
	    usage
	    ;;
	'-j')
	    NUM_MAKE_JOB_SLOTS=$2
	    shift 2
	    continue
	    ;;
	'--is-libsodium')
	    IS_LIBSODIUM=1
	    shift
	    continue
	    ;;
	'--ss')
	    MITIGATE_SS=1
	    shift
	    continue
	    ;;
	'--cs')
	    MITIGATE_CS=1
	    shift
	    continue
	    ;;
	'-c' | '--cc')
	    echo CC opt
	    CC=$2
	    shift 2
	    continue
	    ;;
	'-p' | '--checker-plugin-path')
	    CHECKER_PLUGIN_PATH=$2
	    shift 2
	    continue
	    ;;
	'-b' | '--build-dir')
	    BUILD_DIR=$2
	    shift 2
	    continue
	    ;;
	'-o' | '--big-obj')
	    BIG_OBJ=$2
	    shift 2
	    continue
	    ;;
	'-f' | '--config-file')
	    CONFIG_FILE=$2
	    shift 2
	    continue
	    ;;
	'-e' | '--checker-flags')
	    EXTRA_CHECKER_FLAGS=$2
	    shift 2
	    continue
	    ;;
	'-p' | '--cflags')
	    EXTRA_CFLAGS=$2
	    shift 2
	    continue
	    ;;
	'-t' | '--crypto-dir')
	    TARGET_DIR=$2
	    shift 2
	    continue
	    ;;
	'--')
	    shift
	    break
	    ;;
	*)
	    echo "Unknown option $1"
	    usage
	    ;;
    esac
    shift
done

# check if bap is installed for the checkers
HAS_BAP=$(which bap)
if [[ $? -ne 0 ]]; then
    echo Looks like bap is not installed or available on your path.
    echo To install bap:
    echo -e "\t1. Install the OCaml package manager, opam, using the system package manager, then run the following commands:"
    echo -e "\t2. opam switch create bap-alpha --repos default,bap=git+https://github.com/BinaryAnalysisPlatform/opam-repository#testing 4.11.2+flambda"
    echo -e "\t3. opam install bap"
    echo -e "\t4. opam install bap-primus-symbolic-executor"
    echo -e '\t5. eval $(opam env)'
    exit 3
fi

if [[ MITIGATE_CS -eq 0 ]]; then
    CHECKER_CS_FLAGS=""
    CC_CS_FLAGS=""
else
    CHECKER_CS_FLAGS="--uarch-checker-cs"
    CC_CS_FLAGS="-mllvm --x86-cs -mllvm --x86-cs-csv-path=${CHECKER_ALERTS_CSV}"
fi

if [[ MITIGATE_SS -eq 0 ]]; then
    CHECKER_SS_FLAGS=""
    CC_SS_FLAGS=""
else
    CHECKER_SS_FLAGS="--uarch-checker-ss"
    CC_SS_FLAGS="-mllvm --x86-ss -mllvm --x86-ss-csv-path=${CHECKER_ALERTS_CSV}"
fi

make clean

pushd .
cd $TARGET_DIR; ./configure CC=$CC
CONFIG_RES=$?
popd

if [[ $CONFIG_RES -ne 0 ]]; then
    echo "Error running ./configure in $TARGET_DIR. $TOOLNAME exiting."
    exit 5
fi

# make the dir to hold all of the build artifacts
echo -n "Creating ${TOOLNAME} build dir ${BUILD_DIR}..."
if [[ -e $BUILD_DIR ]]; then
    echo -n it already exists, removing old build dir first...
    rm -r $BUILD_DIR
fi
mkdir $BUILD_DIR
echo done

echo -n "Running target\'s makefile..."
make -C $TARGET_DIR CC=$CC -j ${NUM_MAKE_JOB_SLOTS}
COMPILE_PASS_RES=$?
# echo compile_pass_res is $COMPILE_PASS_RES
echo done

if [[ $COMPILE_PASS_RES -ne 0 ]]; then
    echo "Error running $TOOLNAME initial compilation pass. $TOOLNAME exiting."
    exit 6
fi

if [[ $IS_LIBSODIUM -eq 1 ]]; then
    echo 'init sodium_init' > $CONFIG_FILE
fi

# put all per-function secret csv contents into one big  csv file
# echo -n "Gathering all per-function secret csv files into ${ALL_SECRETS_CSV}..."
# find $TARGET_DIR -name '*secrets.csv' -a ! -empty | xargs -I '{}' cat '{}' >> $CONFIG_FILE
# GATHER_SECRETS_RES=$?
# echo done

# if [[ $GATHER_SECRETS_RES -ne 0 ]]; then
#     echo "Error gathering all per-function secret csv files into one. $TOOLNAME exiting."
#     exit 7
# fi

# echo -n "Cleaning up per-function secret csv files..."
# find . -name '*secrets.csv' -a ! -path "*${BUILD_DIR}*" -delete
# echo done

# put all the object files into one big object file
echo -n "Gathering all intermediate object files into ${BIG_OBJ}..."
find $TARGET_DIR -name '*.o' -a ! -path '*.libs*' | xargs ld -z muldefs -o $BIG_OBJ -lc
BUILD_BIG_OBJ_RES=$?
echo done

if [[ $BUILD_BIG_OBJ_RES -ne 0 ]]; then
    echo "Error jamming all separate object files into one for use by checker. $TOOLNAME exiting."
    exit 8
fi

echo "Starting checker on ${BIG_OBJ} using secrets file ${ALL_SECRETS_CSV}"
echo "Start time is: $(TZ='America/Los_angeles' date +%T-%Z)"
echo "logging to ${BAP_LOGS}"
bap \
    --plugin-path=$CHECKER_PLUGIN_PATH \
    --pass=uarch-checker \
    --no-optimization --bil-optimization=0 \
    --uarch-checker-output-csv-file=$CHECKER_ALERTS_CSV \
    $CHECKER_CS_FLAGS \
    $CHECKER_SS_FLAGS \
    --uarch-checker-no-symex \
    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
    --uarch-checker-config-file=$CONFIG_FILE \
    $BIG_OBJ > $BAP_LOGS 2>&1
echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%T-%Z)"

echo -n Cleaning up build artifacts from compilation,checking pass...
make --directory=$TARGET_DIR clean
echo done


# TODO, this should be llc with just our passes which would get rid of our
# need to have to play nice with the crypto lib's CFLAGS.
# ideally, they would use `override CFLAGS += ...`
# instead of `CFLAGS=...`, so then we can use the comamnd
# line to append to their CFLAGS, but instead, we have to
# check if they use override or not and handle each case separately
# IMPORTANT: iirc, if both SS and CS flags are specified to the compiler, then SS must come before the CS flags
grep -E 'override CFLAGS' ${TARGET_DIR}/Makefile
NO_OVERRIDE=$?
if [[ NO_OVERRIDE -eq 0 ]]; then
    # has override, we are fine
    FINAL_CFLAGS="$CC_SS_FLAGS $CC_CS_FLAGS $EXTRA_CFLAGS"
else
    # get the cflags manually
    # awk: find the line of their makefile that starts with CFLAGS\s*= or CFLAGS= and grab the stuff after
    # THEIR_CFLAGS=$(awk -F"( = )|(=)| " '$1 ~ /^CFLAGS$/ { ORS=" "; for (i = 3; i <= NF; i++) print $i }' ${TARGET_DIR}/Makefile)
    THEIR_CFLAGS=$(awk '$1 ~ /^CFLAGS$/ { ORS=" "; for (i = 3; i <= NF; i++) print $i }' ${TARGET_DIR}/Makefile)
    FINAL_CFLAGS="$CC_SS_FLAGS $CC_CS_FLAGS $THEIR_CFLAGS $EXTRA_CFLAGS"
fi

echo -n Running mitigation pass...
echo -n TODO, this should be llc with just our passes...
echo final_cflags are $FINAL_CFLAGS
export CFLAGS=$FINAL_CFLAGS
make --environment-overrides --directory=$TARGET_DIR CC=$CC -j $NUM_MAKE_JOB_SLOTS
MITIGATION_PASS_RES=$?
echo done

if [[ $MITIGATION_PASS_RES -ne 0 ]]; then
    echo "Error applying mitigation transforms in $TARGET_DIR. $TOOLNAME exiting."
    exit 9
fi

echo -n Running verification pass...
echo "Start time is: $(TZ='America/Los_angeles' date +%T-%Z)"
echo "logging to ${BAP_LOGS}"
bap \
    --plugin-path=$CHECKER_PLUGIN_PATH \
    --pass=uarch-checker \
    --no-optimization --bil-optimization=0 \
    --uarch-checker-output-csv-file=${CHECKER_ALERTS_CSV}.verification.csv \
    $CHECKER_CS_FLAGS \
    $CHECKER_SS_FLAGS \
    --uarch-checker-no-symex \
    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
    --uarch-checker-config-file=$CONFIG_FILE \
    $BIG_OBJ > ${BAP_LOGS}.verification.log 2>&1
echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%T-%Z)"
echo done
