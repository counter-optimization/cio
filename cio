#!/bin/bash

set -u
set -x

# this will be logged to the csv file at the very end of the file
CIO_START_SECS=$(date +%s)
echo "CIO_START_SECS=$CIO_START_SECS"

# SET BY USER
CC=`realpath ~/llvm-project/build/bin/clang`
CHECKER_PLUGIN_PATH=`realpath ./checker/bap/interval/`
CHECKER_PLUGIN_NAME="uarch_checker.plugin"

# cio defaults
TOOLNAME=cio
TZ='America/Los_Angeles'
TIMESTAMP=$(date +%F-%T-%Z)
BUILD_DIR="./${TIMESTAMP}-${TOOLNAME}-build"
LATEST_BUILD_DIR="latest-cio-build"
NUM_MAKE_JOB_SLOTS=8

CFLAGS="-g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -ftls-model=local-dynamic"
EXTRA_CHECKER_FLAGS=""

IS_LIBSODIUM=0

MITIGATE_SS=0
MITIGATE_CS=0
DO_SYMEX=1
SKIP_DOUBLE_CHECK=0
DYNAMIC_HIT_COUNTS=0

SYSCLANG="/usr/bin/clang"

OCAMLRUNPARAM=b
export OCAMLRUNPARAM

function usage
{
    echo "Usage: $TOOLNAME [ -h | --help (displays this message) ]
			   [ -c | --cc <path to c compiler> ]
    	 	   [ -p | --checker-plugin-path <path to dir with uarch_checker.plugin> ]
			   [ -o | --big-obj <path where $TOOLNAME puts jammed together obj file> ]
			   [ -b | --build-dir <path where $TOOLNAME stores intermeiate build artifacts> ]
			   [ -a | --cflags \"<~double quoted string~ of cflags for CC>\" ]
			   [ -e | --checker-flags \"<~double quoted string~ of extra flags for uarch_checker>\" ]
			   [ -r | --bap-core \"<which core to pin bap to>\" ]
			   [ -m \"<record mem usage using JaneStreet Ocaml memtrace for (double-)checking to build dir>\" ]
			   [ -j <num make job slots> ]
			   [ --is-libsodium <run libsodium init> ]
			   [ --ss (do silent store checks and mitigations) ]
			   [ --cs (do comp simp checks and mitigaitons) ]
			   [ --skip-double-check (skip verification run of bap/checkers) on the transformed binary ]
			   [ -d | --dynamic-hit-counts (record dynamic hit counts) ]
			   -f | --config-file <path to uarch checker config file for checking>
			   -t | --crypto-dir <path to the crypto lib project that has the root makefile>
			  
	       	 --config-file and crypto_project_dir_root are required arguments. If they are not passed,
                 the defaults of ${CC} and $(pwd) are used respectively."
    exit 2
}

PARSED_ARGS=$(getopt -o "mdhc:p:b:o:f:e:r:p:t:j:a:b:" -l "bap-core:,dynamic-hit-counts,help,cc:,checker-plugin-path:,build-dir:,big-obj:,config-file:,checker-flags:,cflags:,crypto-dir:,is-libsodium,ss,cs,nosymex,skip-double-check" -n $TOOLNAME -- "$@")

if [[ $? -ne 0 ]]; then
       echo "Error parsing args"
       usage
fi

# echo $PARSED_ARGS

eval set -- "$PARSED_ARGS"
unset PARSED_ARGS

while true; do
    case "$1" in
	'-h' | '--help')
	    usage
	    ;;
	'-j')
	    NUM_MAKE_JOB_SLOTS=$2
	    shift 2
	    continue
	    ;;
	'--is-libsodium')
	    IS_LIBSODIUM=1
	    shift
	    continue
	    ;;
	'--ss')
	    MITIGATE_SS=1
	    shift
	    continue
	    ;;
	'--cs')
	    MITIGATE_CS=1
	    shift
	    continue
	    ;;
	'--nosymex')
	    DO_SYMEX=0
	    shift
	    continue
	    ;;
	'-m')
	    DO_MEMTRACE=1
	    shift
	    continue
	    ;;
	'-c' | '--cc')
	    echo CC opt
	    CC=$2
	    shift 2
	    continue
	    ;;
	'-r' | '--bap-core')
	    BAP_PIN_CORE=$2
	    shift 2
	    continue
	    ;;
	'-p' | '--checker-plugin-path')
	    CHECKER_PLUGIN_PATH=$2
	    shift 2
	    continue
	    ;;
	'-b' | '--build-dir')
	    BUILD_DIR=$2
	    shift 2
	    continue
	    ;;
	'-o' | '--big-obj')
	    BIG_OBJ=$2
	    shift 2
	    continue
	    ;;
	'-f' | '--config-file')
	    CONFIG_FILE=$2
	    shift 2
	    continue
	    ;;
	'-e' | '--checker-flags')
	    EXTRA_CHECKER_FLAGS=$2
	    shift 2
	    continue
	    ;;
	'-a' | '--cflags')
	    CFLAGS=$2
	    shift 2
	    continue
	    ;;
	'-t' | '--crypto-dir')
	    TARGET_DIR=$2
	    shift 2
	    continue
	    ;;
	'--skip-double-check')
	    SKIP_DOUBLE_CHECK=1
	    shift
	    continue
	    ;;
	'-d' | '--dynamic-hit-counts')
	    DYNAMIC_HIT_COUNTS=1
	    shift
	    continue
	    ;;
	'--')
	    shift
	    break
	    ;;
	*)
	    echo "Unknown option $1"
	    usage
	    ;;
    esac
    shift
done

BUILD_DIR=$(realpath "$BUILD_DIR")
mkdir "$BUILD_DIR"
test -L "$LATEST_BUILD_DIR" && rm "$LATEST_BUILD_DIR"
ln -s "$BUILD_DIR" "$LATEST_BUILD_DIR"

NORMAL_MAKE_LOG="${BUILD_DIR}/normal.make.log"
BIG_OBJ="${BUILD_DIR}/jammed.together.o"
ALL_SECRETS_CSV="${BUILD_DIR}/secrets.csv"
BAP_LOGS="${BUILD_DIR}/bap.log"
CHECKER_ALERTS_CSV="${BUILD_DIR}/checker.alerts.csv"
TAINT_CACHE="${BUILD_DIR}/taintcache.bin"
EVAL_RUNTIME_CSV="${BUILD_DIR}/cio-run-times.csv"

# write EVAL_RUNTIME_CSV header to file
echo "step,start_sec,stop_sec" > "$EVAL_RUNTIME_CSV"

# check if bap is installed for the checkers
HAS_BAP=$(which bap)
if [[ $? -ne 0 ]]; then
    echo Looks like bap is not installed or available on your path.
    echo To install bap:
    echo -e "\t1. Install the OCaml package manager, opam, using the system package manager, then run the following commands:"
    echo -e "\t2. opam switch create bap-alpha --repos default,bap=git+https://github.com/BinaryAnalysisPlatform/opam-repository#testing 4.11.2+flambda"
    echo -e "\t3. opam install bap"
    echo -e "\t4. opam install bap-primus-symbolic-executor"
    echo -e '\t5. eval $(opam env)'
    exit 3
fi

if [[ "$DO_SYMEX" -eq 1 ]]; then
    CHECKER_SYMEX_FLAGS=""
else
    CHECKER_SYMEX_FLAGS="--uarch-checker-no-symex"
fi

if [[ "$MITIGATE_CS" -eq 0 ]]; then
    CHECKER_CS_FLAGS=""
    CC_CS_FLAGS=""
else
    CHECKER_CS_FLAGS="--uarch-checker-cs"
    CC_CS_FLAGS="-mllvm --x86-cs -mllvm --x86-cs-csv-path=${CHECKER_ALERTS_CSV}"
fi

if [[ "$MITIGATE_SS" -eq 0 ]]; then
    CHECKER_SS_FLAGS=""
    CC_SS_FLAGS=""
else
    CHECKER_SS_FLAGS="--uarch-checker-ss"
    CC_SS_FLAGS="-mllvm --x86-ss -mllvm --x86-ss-csv-path=${CHECKER_ALERTS_CSV}"
fi

# check that libsodium and checker submodules are init'd and that checker plugin is built
if [[ ! (-e "$CHECKER_PLUGIN_PATH/$CHECKER_PLUGIN_NAME") ]]; then
    echo "Checkers arent built, please run 'make checker_init', then rerun cio"
    exit 2
fi

if [[ "$IS_LIBSODIUM" -eq 1 && ! (-e "$TARGET_DIR/configure") ]]; then
    echo "Libsodium submodule isn't initialized, please run 'make libsodium_init', then rerun cio"
    exit 2
fi

echo "Starting compilation step"
COMPILATION_START_SECS=$(date +%s)
echo "COMPILATION_START_SECS=$COMPILATION_START_SECS"

make --directory=$TARGET_DIR clean

pushd .

# need the underlying clang driver that ciocc uses in configure.
# ciocc currently does not work here
if [[ -e "$TARGET_DIR/configure" ]]; then
    cd $TARGET_DIR; ./configure CC="$SYSCLANG" --disable-asm
    CONFIG_RES=$?
    popd

    if [[ $CONFIG_RES -ne 0 ]]; then
	echo "Error running ./configure in $TARGET_DIR. $TOOLNAME exiting."
	exit $CONFIG_RES
    fi
fi

# # make the dir to hold all of the build artifacts
# echo -n "Creating ${TOOLNAME} build dir ${BUILD_DIR}..."
# if [[ -e $BUILD_DIR ]]; then
#     echo -n it already exists, removing old build dir first...
#     rm -r $BUILD_DIR
# fi
# mkdir $BUILD_DIR
# echo done

# Get their CFLAGS so we can append ours
COMPILATION_STEP_CFLAGS="-mllvm --x86-gen-idx $CFLAGS"
# grep -E 'override CFLAGS' ${TARGET_DIR}/Makefile
# NO_OVERRIDE=$?
# if [[ NO_OVERRIDE -eq 0 ]]; then
#     COMPILATION_STEP_CFLAGS=
# else
#     THEIR_CFLAGS=$(awk '$1 ~ /^CFLAGS$/ { ORS=" "; for (i = 3; i <= NF; i++) print $i }' ${TARGET_DIR}/Makefile)
#     COMPILATION_STEP_CFLAGS="-mllvm --x86-gen-idx $THEIR_CFLAGS $EXTRA_CFLAGS"
# fi

echo -n "Running target\'s makefile... with CFLAGS=\"$COMPILATION_STEP_CFLAGS\""
make -j "$NUM_MAKE_JOB_SLOTS" --directory=$TARGET_DIR CC=$CC CFLAGS="$COMPILATION_STEP_CFLAGS"
COMPILE_PASS_RES=$?
# echo compile_pass_res is $COMPILE_PASS_RES
echo done

if [[ $COMPILE_PASS_RES -ne 0 ]]; then
    echo "Error running $TOOLNAME initial compilation pass. $TOOLNAME exiting."
    exit $COMPILE_PASS_RES
fi

# put all the object files into one big object file
if [[ "$IS_LIBSODIUM" -eq 1 ]]; then
    echo "Gathering libsodium..."
    source $TARGET_DIR/src/libsodium/libsodium.la
    LIBNA_SHARED_LIB=$(find $TARGET_DIR -name "$dlname")
    BUILD_BIG_OBJ_RES=$?
    if [[ "$BUILD_BIG_OBJ_RES" -eq 0 ]]; then
	cp $LIBNA_SHARED_LIB $BIG_OBJ
    fi
else
    echo "Gathering all intermediate object files into ${BIG_OBJ}..."
	touch $BIG_OBJ
    find $TARGET_DIR -name '*.o' -a ! -path '*.libs*' | xargs ld -O0 -o $BIG_OBJ -lc
    BUILD_BIG_OBJ_RES=$?
    echo done
fi

if [[ $BUILD_BIG_OBJ_RES -ne 0 ]]; then
    echo "Error jamming all separate object files into one for use by checker. $TOOLNAME exiting."
    exit $BUILD_BIG_OBJ_RES
fi

echo "Finished compilation step"
COMPILATION_FINISH_SECS=$(date +%s)
echo "COMPILATION_FINISH_SECS=$COMPILATION_FINISH_SECS"

# write compilation step time to csv file
echo "COMPILATION,$COMPILATION_START_SECS,$COMPILATION_FINISH_SECS" >> "$EVAL_RUNTIME_CSV"


echo "Starting checking step"
CHECKING_START_SECS=$(date +%s)
echo "CHECKING_START_SECS=$CHECKING_START_SECS"

echo "SHA256 of pre-mitigation $BIG_OBJ is:"
echo $(sha256sum $BIG_OBJ)

if [[ -v DO_MEMTRACE && "$DO_MEMTRACE" -eq 1 ]]; then
    export MEMTRACE="${BUILD_DIR}/checking.ctf"
    CHECKER_MEMTRACE_FLAGS="--uarch-checker-memtrace"
else
    CHECKER_MEMTRACE_FLAGS=""
fi

echo "Starting checker on ${BIG_OBJ} using secrets file ${ALL_SECRETS_CSV}"
echo "Start time is: $(TZ='America/Los_angeles' date +%F-%T-%Z)"
echo "logging to ${BAP_LOGS}"
if [[ -v BAP_PIN_CORE ]]; then
    taskset -c $BAP_PIN_CORE bap \
	    --plugin-path=$CHECKER_PLUGIN_PATH \
	    --pass=uarch-checker \
	    --uarch-checker-log-level=info \
	    --uarch-checker-taint-cache=$TAINT_CACHE \
	    --no-cache \
	    --no-optimization --bil-optimization=0 \
	    --uarch-checker-output-csv-file=$CHECKER_ALERTS_CSV \
	    $CHECKER_CS_FLAGS \
	    $CHECKER_SS_FLAGS \
	    $CHECKER_SYMEX_FLAGS \
	    $CHECKER_MEMTRACE_FLAGS \
	    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
	    --uarch-checker-config-file=$CONFIG_FILE \
	    $BIG_OBJ > $BAP_LOGS 2>&1
else
    bap \
	--plugin-path=$CHECKER_PLUGIN_PATH \
	--pass=uarch-checker \
	--uarch-checker-log-level=info \
	--uarch-checker-taint-cache=$TAINT_CACHE \
	--no-cache \
	--no-optimization --bil-optimization=0 \
	--uarch-checker-output-csv-file=$CHECKER_ALERTS_CSV \
	$CHECKER_CS_FLAGS \
	$CHECKER_SS_FLAGS \
	$CHECKER_SYMEX_FLAGS \
	$CHECKER_MEMTRACE_FLAGS \
	--uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
	--uarch-checker-config-file=$CONFIG_FILE \
	$BIG_OBJ > $BAP_LOGS 2>&1
fi

echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%F-%T-%Z)"

echo "Checking if bap actually ran... you should also check that the elapsed time above is >= 10 minutes"
LINES_IN_BAP_ALERTS=$(wc -l "$CHECKER_ALERTS_CSV" | awk '{ print $1 }')
if [[ $LINES_IN_BAP_ALERTS -le 1 ]]; then
    # check for <= 1 because if it is empty or only contains the header row, there is probably a problem
    echo "ERROR: Number of rows in bap alerts file ($CHECKER_ALERTS_CSV) is <= 1 after checking step."
    echo "ERROR: BAP probably did not run or did not run properly. Please check ($BAP_LOGS) for more info"
    echo "ERROR: exiting."
    exit 3
fi

echo "Finished checking step"
CHECKING_FINISH_SECS=$(date +%s)
echo "CHECKING_FINISH_SECS=$CHECKING_FINISH_SECS"

# write checking step time to csv file
echo "CHECKING,$CHECKING_START_SECS,$CHECKING_FINISH_SECS" >> "$EVAL_RUNTIME_CSV"

echo "Starting mitigation step"
MITIGATION_START_SECS=$(date +%s)
echo "MITIGATION_START_SECS=$MITIGATION_START_SECS"

echo -n Cleaning up build artifacts from compilation,checking pass...
make --directory=$TARGET_DIR clean
echo done

if [[ "$MITIGATE_CS" -eq 1 && "$MITIGATE_SS" -eq 1 ]]; then
    MITIGATION_PASS_CFLAGS="-mllvm --x86-gen-idx -mllvm --x86-ss -mllvm --x86-ss-csv-path=${CHECKER_ALERTS_CSV} -mllvm --x86-cs -mllvm --x86-cs-csv-path=${CHECKER_ALERTS_CSV} -mllvm --x86-gen-deidx -mllvm -global-scratch -mllvm -gs-size=8 $CFLAGS"
else
    if [[ "$MITIGATE_CS" -eq 1 ]]; then
	MITIGATION_PASS_CFLAGS="-mllvm --x86-gen-idx -mllvm --x86-cs -mllvm --x86-cs-csv-path=${CHECKER_ALERTS_CSV} -mllvm --x86-gen-deidx -mllvm -global-scratch -mllvm -gs-size=8 $CFLAGS"
    fi
    
    if [[ "$MITIGATE_SS" -eq 1 ]]; then
	MITIGATION_PASS_CFLAGS="-mllvm --x86-gen-idx -mllvm --x86-ss -mllvm --x86-ss-csv-path=${CHECKER_ALERTS_CSV} -mllvm --x86-gen-deidx $CFLAGS"
    fi
fi

if [[ $DYNAMIC_HIT_COUNTS -eq 1 ]]; then
    MITIGATION_PASS_CFLAGS="-mllvm --x86-cs-dyn-stat -mllvm --x86-dyn-stat-decl $MITIGATION_PASS_CFLAGS"
fi

MITIGATION_PASS_CFLAGS="$MITIGATION_PASS_CFLAGS"

# MITIGATION STEP
echo "Running mitigation pass... with CFLAGS=\"$MITIGATION_PASS_CFLAGS\""
make --directory=$TARGET_DIR clean
make --directory="$TARGET_DIR" CC="$CC" -j "$NUM_MAKE_JOB_SLOTS" CFLAGS="$MITIGATION_PASS_CFLAGS"
MITIGATION_PASS_RES=$?
echo done

if [[ $MITIGATION_PASS_RES -ne 0 ]]; then
    echo "Error applying mitigation transforms in $TARGET_DIR. $TOOLNAME exiting."
    exit $MITIGATION_PASS_RES
fi

echo "Finished mitigation step"
MITIGATION_FINISH_SECS=$(date +%s)
echo "MITIGATION_FINISH_SECS=$MITIGATION_FINISH_SECS"

# write mitigation step time to csv file
echo "MITIGATION,$MITIGATION_START_SECS,$MITIGATION_FINISH_SECS" >> "$EVAL_RUNTIME_CSV"

# put all the object files into one big object file again
echo -n "Gathering all intermediate object files into ${BIG_OBJ}..."
if [[ "$IS_LIBSODIUM" -eq 1 ]]; then
    source $TARGET_DIR/src/libsodium/libsodium.la
    LIBNA_SHARED_LIB=$(find $TARGET_DIR -name "$dlname")
    BUILD_BIG_OBJ_RES=$?
    if [[ "$BUILD_BIG_OBJ_RES" -eq 0 ]]; then
	cp $LIBNA_SHARED_LIB ${BIG_OBJ}.verification.o
    fi
else
    echo "Gathering all intermediate object files into ${BIG_OBJ}..."
    find $TARGET_DIR -name '*.o' -a ! -path '*.libs*' | xargs ld -O0 -o ${BIG_OBJ}.verification.o -lc
    BUILD_BIG_OBJ_RES=$?
    echo done
fi

if [[ $BUILD_BIG_OBJ_RES -ne 0 ]]; then
    echo "Error jamming all separate object files into one for use by checker. $TOOLNAME exiting."
    exit $BUILD_BIG_OBJ_RES
fi

echo "Starting double-checking step"
DOUBLECHECKING_START_SECS=$(date +%s)
echo "DOUBLECHECKING_START_SECS=$DOUBLECHECKING_START_SECS"

if [[ $SKIP_DOUBLE_CHECK -eq 0 ]]; then
    echo -n Running verification pass...
    echo "Start time is: $(TZ='America/Los_angeles' date +%F-%T-%Z)"
    echo "logging to ${BAP_LOGS}"
    if [[ -v DO_MEMTRACE && "$DO_MEMTRACE" -eq 1 ]]; then
	export MEMTRACE="${BUILD_DIR}/double-checking.ctf"
	CHECKER_MEMTRACE_FLAGS="--uarch-checker-memtrace"
    else
	CHECKER_MEMTRACE_FLAGS=""
    fi
    
    if [[ -v BAP_PIN_CORE ]]; then
	taskset -c $BAP_PIN_CORE bap \
		--plugin-path=$CHECKER_PLUGIN_PATH \
		--pass=uarch-checker \
		--uarch-checker-double-check \
		--uarch-checker-log-level=info \
		--uarch-checker-taint-cache=$TAINT_CACHE \
		--no-cache \
		--no-optimization --bil-optimization=0 \
		--uarch-checker-output-csv-file=${CHECKER_ALERTS_CSV}.verification.csv \
		$CHECKER_CS_FLAGS \
		$CHECKER_SS_FLAGS \
		$CHECKER_SYMEX_FLAGS \
		$CHECKER_MEMTRACE_FLAGS \
		--uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
		--uarch-checker-config-file=$CONFIG_FILE \
		${BIG_OBJ}.verification.o > ${BAP_LOGS}.verification.log 2>&1
    else
	bap \
	    --plugin-path=$CHECKER_PLUGIN_PATH \
	    --pass=uarch-checker \
	    --uarch-checker-double-check \
	    --uarch-checker-log-level=info \
	    --uarch-checker-taint-cache=$TAINT_CACHE \
	    --no-cache \
	    --no-optimization --bil-optimization=0 \
	    --uarch-checker-output-csv-file=${CHECKER_ALERTS_CSV}.verification.csv \
	    $CHECKER_CS_FLAGS \
	    $CHECKER_SS_FLAGS \
	    $CHECKER_SYMEX_FLAGS \
	    $CHECKER_MEMTRACE_FLAGS \
	    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
	    --uarch-checker-config-file=$CONFIG_FILE \
	    ${BIG_OBJ}.verification.o > ${BAP_LOGS}.verification.log 2>&1
    fi
    echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%F-%T-%Z)"
    echo done
else
    echo "Skip double check arg provided, skipping double check"
fi

echo "Finished double-checking step"
DOUBLECHECKING_FINISH_SECS=$(date +%s)
echo "DOUBLECHECKING_FINISH_SECS=$DOUBLECHECKING_FINISH_SECS"

# write mitigation step time to csv file
echo "DOUBLECHECKING,$DOUBLECHECKING_START_SECS,$DOUBLECHECKING_FINISH_SECS" >> "$EVAL_RUNTIME_CSV"

CIO_FINISH_SECS=$(date +%s)
echo "CIO_FINISH_SECS=$CIO_FINISH_SECS"

# write cio overall time to csv file
echo "CIOTOTAL,$CIO_START_SECS,$CIO_FINISH_SECS" >> "$EVAL_RUNTIME_CSV"

if [[ $IS_LIBSODIUM -eq 1 ]]; then
    echo -n "Running libsodium unit tests..."
    make --directory=$TARGET_DIR check CC=$CC
    echo done
fi

# if [[ $SKIP_DOUBLE_CHECK -eq 0 ]]; then 
#     LINES_IN_BAP_VERIF_ALERTS=$(wc -l "${CHECKER_ALERTS_CSV}.verification.csv" | awk '{ print $1 }')
#     if [[ $LINES_IN_BAP_VERIF_ALERTS -gt 1 ]]; then
# 	echo "ERROR: BAP and checkers couldn't verify that the final code is free of leaks"
# 	echo "ERROR: See ${CHECKER_ALERTS_CSV}.verification.csv and ${BAP_LOGS}.verification.log for more info"
# 	echo "ERROR: exiting"
# 	exit 4
#     else
# 	exit 0
#     fi
# fi


