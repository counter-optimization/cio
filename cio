#!/bin/bash

# SET BY USER
OUR_LLVM_BINARIES=`realpath ~/llvm-project/build/bin`
CLANG="$OUR_LLVM_BINARIES/clang" # need the underlying clang driver that ciocc uses
LLC="$OUR_LLVM_BINARIES/llc"
LLVM_MC="$OUR_LLVM_BINARIES/llvm-mc"
CIOCC=`realpath ./ciocc`
CC="$CIOCC"
CHECKER_PLUGIN_PATH=`realpath ./checker/bap/interval/`

# cio defaults
TOOLNAME=cio
BUILD_DIR=`realpath ./${TOOLNAME}-build`
NORMAL_MAKE_LOG=`realpath ${BUILD_DIR}/normal.make.log`
BIG_OBJ=`realpath ${BUILD_DIR}/jammed.together.o`
ALL_SECRETS_CSV=`realpath ${BUILD_DIR}/secrets.csv`
BAP_LOGS=`realpath ${BUILD_DIR}/bap.log`
CHECKER_ALERTS_CSV=`realpath ${BUILD_DIR}/checker.alerts.csv`
NUM_MAKE_JOB_SLOTS=8

EXTRA_CFLAGS=""
EXTRA_CHECKER_FLAGS=""

IS_LIBSODIUM=0

MITIGATE_SS=0
MITIGATE_CS=0
DO_SYMEX=1

function usage
{
    echo "Usage: $TOOLNAME [ -h | --help (displays this message) ]
			   [ -c | --cc <path to c compiler> ]
    	 	 	   [ -p | --checker-plugin-path <path to dir with uarch_checker.plugin> ]
			   [ -o | --big-obj <path where $TOOLNAME puts jammed together obj file> ]
			   [ -b | --build-dir <path where $TOOLNAME stores intermeiate build artifacts> ]
			   [ -p | --cflags \"<~double quoted string~ of extra cflags for CC>\" ]
			   [ -e | --checker-flags \"<~double quoted string~ of extra flags for uarch_checker>\" ]
			   [ -j <num make job slots> ]
			   [ --is-libsodium <run libsodium init> ]
			   [ --ss (do silent store checks and mitigations) ]
			   [ --cs (do comp simp checks and mitigaitons) ]
			   -f | --config-file <path to uarch checker config file for checking>
			   -t | --crypto-dir <path to the crypto lib project that has the root makefile>
			  
	       	 --config-file and crypto_project_dir_root are required arguments. If they are not passed,
                 the defaults of ${CC} and $(pwd) are used respectively."
    exit 1
}

PARSED_ARGS=$(getopt -o "hc:p:b:o:f:e:p:t:j:" -l "help,cc:,checker-plugin-path:,build-dir:,big-obj:,config-file:,checker-flags:,cflags:,crypto-dir:,is-libsodium,ss,cs,nosymex" -n $TOOLNAME -- "$@")

if [[ $? -ne 0 ]]; then
       echo "Error parsing args"
       usage
fi

# echo $PARSED_ARGS

eval set -- "$PARSED_ARGS"
unset PARSED_ARGS

while true; do
    case "$1" in
	'-h' | '--help')
	    usage
	    ;;
	'-j')
	    NUM_MAKE_JOB_SLOTS=$2
	    shift 2
	    continue
	    ;;
	'--is-libsodium')
	    IS_LIBSODIUM=1
	    shift
	    continue
	    ;;
	'--ss')
	    MITIGATE_SS=1
	    shift
	    continue
	    ;;
	'--cs')
	    MITIGATE_CS=1
	    shift
	    continue
	    ;;
	'--nosymex')
	    DO_SYMEX=0
	    shift
	    continue
	    ;;
	'-c' | '--cc')
	    echo CC opt
	    CC=$2
	    shift 2
	    continue
	    ;;
	'-p' | '--checker-plugin-path')
	    CHECKER_PLUGIN_PATH=$2
	    shift 2
	    continue
	    ;;
	'-b' | '--build-dir')
	    BUILD_DIR=$2
	    shift 2
	    continue
	    ;;
	'-o' | '--big-obj')
	    BIG_OBJ=$2
	    shift 2
	    continue
	    ;;
	'-f' | '--config-file')
	    CONFIG_FILE=$2
	    shift 2
	    continue
	    ;;
	'-e' | '--checker-flags')
	    EXTRA_CHECKER_FLAGS=$2
	    shift 2
	    continue
	    ;;
	'-p' | '--cflags')
	    EXTRA_CFLAGS=$2
	    shift 2
	    continue
	    ;;
	'-t' | '--crypto-dir')
	    TARGET_DIR=$2
	    shift 2
	    continue
	    ;;
	'--')
	    shift
	    break
	    ;;
	*)
	    echo "Unknown option $1"
	    usage
	    ;;
    esac
    shift
done

# check if bap is installed for the checkers
HAS_BAP=$(which bap)
if [[ $? -ne 0 ]]; then
    echo Looks like bap is not installed or available on your path.
    echo To install bap:
    echo -e "\t1. Install the OCaml package manager, opam, using the system package manager, then run the following commands:"
    echo -e "\t2. opam switch create bap-alpha --repos default,bap=git+https://github.com/BinaryAnalysisPlatform/opam-repository#testing 4.11.2+flambda"
    echo -e "\t3. opam install bap"
    echo -e "\t4. opam install bap-primus-symbolic-executor"
    echo -e '\t5. eval $(opam env)'
    exit 2
fi

if [[ "$DO_SYMEX" -eq 1 ]]; then
    CHECKER_SYMEX_FLAGS=""
else
    CHECKER_SYMEX_FLAGS="--uarch-checker-no-symex"
fi

if [[ "$MITIGATE_CS" -eq 0 ]]; then
    CHECKER_CS_FLAGS=""
    CC_CS_FLAGS=""
    LLC_CS_FLAGS=""
else
    CHECKER_CS_FLAGS="--uarch-checker-cs"
    CC_CS_FLAGS="-mllvm --x86-cs -mllvm --x86-cs-csv-path=${CHECKER_ALERTS_CSV}"
    LLC_CS_FLAGS="--x86-cs --x86-cs-csv-path=${CHECKER_ALERTS_CSV}"
fi

if [[ "$MITIGATE_SS" -eq 0 ]]; then
    CHECKER_SS_FLAGS=""
    CC_SS_FLAGS=""
    LLC_SS_FLAGS=""
else
    CHECKER_SS_FLAGS="--uarch-checker-ss"
    CC_SS_FLAGS="-mllvm --x86-ss -mllvm --x86-ss-csv-path=${CHECKER_ALERTS_CSV}"
    LLC_SS_FLAGS="--x86-ss --x86-ss-csv-path=${CHECKER_ALERTS_CSV}"
fi


# need to set cio to a known-good state, so clean, re-configure
make --directory=$TARGET_DIR clean

pushd .
# need the underlying clang driver that ciocc uses in configure.
# ciocc currently does not work here
cd $TARGET_DIR; ./configure CC=$CLANG
CONFIG_RES=$?
popd

if [[ $CONFIG_RES -ne 0 ]]; then
    echo "Error running ./configure in $TARGET_DIR. $TOOLNAME exiting."
    exit $CONFIG_RES
fi



# make the dir to hold all of the build artifacts
echo "Creating ${TOOLNAME} build dir ${BUILD_DIR}..."
if [[ -e $BUILD_DIR ]]; then
    echo it already exists, removing old build dir first...
    rm -r $BUILD_DIR
fi
mkdir $BUILD_DIR
echo done



echo "Running target's makefile: make -j 32 --directory=$TARGET_DIR CC=$CC"
make -j 32 --directory=$TARGET_DIR CC=$CC
COMPILE_PASS_RES=$?
# echo compile_pass_res is $COMPILE_PASS_RES
echo done

if [[ $COMPILE_PASS_RES -ne 0 ]]; then
    echo "Error running $TOOLNAME initial compilation pass. $TOOLNAME exiting."
    exit $COMPILE_PASS_RES
fi



if [[ $IS_LIBSODIUM -eq 1 ]]; then
    echo 'init sodium_init' > $CONFIG_FILE
fi



# put all per-function secret csv contents into one big  csv file
# echo "Gathering all per-function secret csv files into ${ALL_SECRETS_CSV}..."
find $TARGET_DIR -name '*secrets.csv' -a ! -empty | xargs -I '{}' cat '{}' >> $CONFIG_FILE
GATHER_SECRETS_RES=$?
echo done

if [[ $GATHER_SECRETS_RES -ne 0 ]]; then
    echo "Error gathering all per-function secret csv files into one. $TOOLNAME exiting."
    exit $GATHER_SECRETS_RES
fi

echo "Cleaning up per-function secret csv files..."
find $TARGET_DIR -name '*secrets.csv' -a ! -path "*${BUILD_DIR}*" -delete
echo done



# put all the object files into one big object file
if [[ "$IS_LIBSODIUM" -eq 1 ]]; then
    source $TARGET_DIR/src/libsodium/libsodium.la
    LIBNA_SHARED_LIB=$(find $TARGET_DIR -name "$dlname")
    BUILD_BIG_OBJ_RES=$?
    if [[ "$BUILD_BIG_OBJ_RES" -eq 0 ]]; then
	cp $LIBNA_SHARED_LIB $BIG_OBJ
    fi
else
    echo "Gathering all intermediate object files into ${BIG_OBJ}..."
    find $TARGET_DIR -name '*.o' -a ! -path '*.libs*' | xargs ld -O0 -o $BIG_OBJ -lc
    BUILD_BIG_OBJ_RES=$?
    echo done
fi

if [[ $BUILD_BIG_OBJ_RES -ne 0 ]]; then
    echo "Error jamming all separate object files into one for use by checker. $TOOLNAME exiting."
    exit $BUILD_BIG_OBJ_RES
fi



echo "SHA256 of pre-mitigation $BIG_OBJ is:"
echo $(sha256sum $BIG_OBJ)



echo Dumping BIR and DKNOWLEDGE into $BUILD_DIR/jammed.together.dbir.txt
bap -dbir --no-optimization --bil-optimization=0 $BIG_OBJ &> $BUILD_DIR/jammed.together.dbir.txt
bap -dknowledge --no-optimization --bil-optimization=0 $BIG_OBJ >> $BUILD_DIR/jammed.together.dbir.txt 2>&1



echo "Starting checker on ${BIG_OBJ} using secrets file ${ALL_SECRETS_CSV}"
echo "Start time is: $(TZ='America/Los_angeles' date +%T-%Z)"
echo "logging to ${BAP_LOGS}"
bap \
    --plugin-path=$CHECKER_PLUGIN_PATH \
    --pass=uarch-checker \
    --no-optimization --bil-optimization=0 \
    --uarch-checker-output-csv-file=$CHECKER_ALERTS_CSV \
    $CHECKER_CS_FLAGS \
    $CHECKER_SS_FLAGS \
    $CHECKER_SYMEX_FLAGS \
    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
    --uarch-checker-config-file=$CONFIG_FILE \
    $BIG_OBJ > $BAP_LOGS 2>&1
echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%T-%Z)"



ALL_MIR_FILES=$(find $TARGET_DIR -iname '*.mir')
for MIR_FILE in $ALL_MIR_FILES; do
    CIOCC_COMPILATION_FILE=${MIR_FILE/%.mir/.ciocc}
    if [[ ! (-e "$CIOCC_COMPILATION_FILE") ]]; then
	echo "ciocc metadata file for MIR file $MIR_FILE doesn't exist"
	exit 3
    fi
    # this source provides definitions for ASM_FILE, MIR_FILE, OBJ_FILE 
    source "$CIOCC_COMPILATION_FILE"
    echo "$LLC --relocation-model=pic $LLC_SS_FLAGS $LLC_CS_FLAGS $MIR_FILE -o $ASM_FILE"
    $LLC --relocation-model=pic "$LLC_SS_FLAGS" "$LLC_CS_FLAGS" $MIR_FILE -o $ASM_FILE
    echo "$LLVM_MC --position-independent $ASM_FILE -filetype=obj -o $OBJ_FILE"
    $LLVM_MC --position-independent $ASM_FILE -filetype=obj -o $OBJ_FILE
done



# after regenerating the object files, the shared libraries should be out of
# date, so running make should regenerate these automagically
# don't need to use ciocc here
make --directory="$TARGET_DIR" CC="$CLANG" -j "$NUM_MAKE_JOB_SLOTS"



# put all the object files into one big object file again
if [[ "$IS_LIBSODIUM" -eq 1 ]]; then
    source "$TARGET_DIR/src/libsodium/libsodium.la"
    LIBNA_SHARED_LIB=$(find "$TARGET_DIR" -name "$dlname")
    BUILD_BIG_OBJ_RES=$?
    if [[ "$BUILD_BIG_OBJ_RES" -eq 0 ]]; then
	cp "$LIBNA_SHARED_LIB" "$BIG_OBJ.verification.o"
    fi
else
    echo "Gathering all intermediate object files into ${BIG_OBJ}..."
    find "$TARGET_DIR" -name '*.o' -a ! -path '*.libs*' | xargs ld -O0 -o "$BIG_OBJ.verification.o" -lc
    BUILD_BIG_OBJ_RES=$?
    echo done
fi

if [[ "$BUILD_BIG_OBJ_RES" -ne 0 ]]; then
    echo "Error jamming all separate object files into one for use by checker. $TOOLNAME exiting."
    exit $BUILD_BIG_OBJ_RES
fi



echo "SHA256 of post-mitigation $BIG_OBJ.verification.o is:"
echo $(sha256sum "$BIG_OBJ.verification.o")



echo Running verification pass...
echo "Start time is: $(TZ='America/Los_angeles' date +%T-%Z)"
echo "logging to ${BAP_LOGS}"
bap \
    --plugin-path=$CHECKER_PLUGIN_PATH \
    --pass=uarch-checker \
    --no-optimization --bil-optimization=0 \
    --uarch-checker-output-csv-file=${CHECKER_ALERTS_CSV}.verification.csv \
    $CHECKER_CS_FLAGS \
    $CHECKER_SS_FLAGS \
    $CHECKER_SYMEX_FLAGS \
    --uarch-checker-symex-profiling-output-file=./symex-profiling-data.csv \
    --uarch-checker-config-file=$CONFIG_FILE \
    ${BIG_OBJ}.verification.o > ${BAP_LOGS}.verification.log 2>&1
echo "Done checking $BIG_OBJ at $(TZ='America/Los_angeles' date +%T-%Z)"
echo done



if [[ "$IS_LIBSODIUM" -eq 1 ]]; then
    echo "Running libsodium unit tests..."
    make -j 32 --directory="$TARGET_DIR" check
    echo done
fi
